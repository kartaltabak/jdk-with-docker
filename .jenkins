String cron_string = BRANCH_NAME == "main" ? "@monthly" : ""

tag = new Date().format("yyyyMMdd", TimeZone.getTimeZone('UTC'))

def buildImage() {
    script {
        sh 'docker pull openjdk:8-jdk'
        jdkversion = "jdk8"
        docker.withRegistry('https://registry-1.docker.io', 'Dockerhub-kartaltabak') {
            def repoName = "kartaltabak/jdk-with-docker"
            def taggedName = repoName + ":" + jdkversion + "-" + tag
            def image = docker.build(taggedName, "docker-jdk8")

            sh "docker run --rm ${taggedName} java -version"

            image.push()

            def latestName = repoName + ":" + jdkversion
            sh "docker tag " + taggedName + " " + latestName
            docker.image(latestName).push()
        }
    }
}

pipeline {
    agent any
    options {
        disableConcurrentBuilds()
    }
    triggers { cron(cron_string) }
    stages {
        stage('Build & Push') {
            steps {
                buildImage()

                script {
                    sh 'docker pull kartaltabak/jdk-with-docker:jdk8'
                    jdkversion = "jdk8-maven"
                    docker.withRegistry('https://registry-1.docker.io', 'Dockerhub-kartaltabak') {
                        def repoName = "kartaltabak/jdk-with-docker"
                        def taggedName = repoName + ":" + jdkversion + "-" + tag
                        def image = docker.build(taggedName, "docker-jdk8-maven")

                        sh "docker run --rm ${taggedName} java -version"

                        image.push()

                        def latestName = repoName + ":" + jdkversion
                        sh "docker tag " + taggedName + " " + latestName
                        docker.image(latestName).push()
                    }
                }
                script {
                    sh 'docker pull openjdk:11-jdk'
                    jdkversion = "jdk11"
                    docker.withRegistry('https://registry-1.docker.io', 'Dockerhub-kartaltabak') {
                        def repoName = "kartaltabak/jdk-with-docker"
                        def taggedName = repoName + ":" + jdkversion + "-" + tag
                        def image = docker.build(taggedName, "docker-jdk11")

                        sh "docker run --rm ${taggedName} java -version"

                        image.push()

                        def latestName = repoName + ":" + jdkversion
                        sh "docker tag " + taggedName + " " + latestName
                        docker.image(latestName).push()
                    }
                }
                script {
                    sh 'docker pull openjdk:15-jdk'
                    jdkversion = "jdk15"
                    docker.withRegistry('https://registry-1.docker.io', 'Dockerhub-kartaltabak') {
                        def repoName = "kartaltabak/jdk-with-docker"
                        def taggedName = repoName + ":" + jdkversion + "-" + tag
                        def image = docker.build(taggedName, "docker-jdk15")

                        sh "docker run --rm ${taggedName} java -version"

                        image.push()

                        def latestName = repoName + ":" + jdkversion
                        sh "docker tag " + taggedName + " " + latestName
                        docker.image(latestName).push()
                    }
                }
                script {
                    sh 'docker pull kartaltabak/jdk-with-docker:jdk15'
                    jdkversion = "jdk15-maven"
                    docker.withRegistry('https://registry-1.docker.io', 'Dockerhub-kartaltabak') {
                        def repoName = "kartaltabak/jdk-with-docker"
                        def taggedName = repoName + ":" + jdkversion + "-" + tag
                        def image = docker.build(taggedName, "docker-jdk15-maven")

                        sh "docker run --rm ${taggedName} java -version"

                        image.push()

                        def latestName = repoName + ":" + jdkversion
                        sh "docker tag " + taggedName + " " + latestName
                        docker.image(latestName).push()
                    }
                }
            }
        }
    }
}
